# -*- coding: utf-8 -*-
"""Kleckerova_Exercise_1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VqSCYcjdgytI_R19yfbe481yuJRIC693

# Úkol 1: LOESS Regrese

## LOESS Regrese
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from statsmodels.nonparametric.smoothers_lowess import lowess

# Načtení dat
manufacturing = pd.read_csv("manufacturing.csv", delimiter=",")

# Rozdělení dat na trénovací a testovací množinu (70/30)
vstupni_sloupce = manufacturing.columns[:-1][:5]
cilova_promenna = manufacturing.columns[-1]
train_test_splits = {}

for col in vstupni_sloupce:
    sloupec = manufacturing[[col]].values
    cilovka = manufacturing[cilova_promenna].values

    sloupec_train, sloupec_test, cilovka_train, cilovka_test = train_test_split(sloupec, cilovka, test_size=0.3, random_state=42)
    train_test_splits[col] = {
        "X_train": sloupec_train.flatten(),
        "X_test": sloupec_test.flatten(),
        "y_train": cilovka_train,
        "y_test": cilovka_test
    }

fig, axes = plt.subplots(1, 5, figsize=(20, 5))
fig.suptitle("Bodové grafy s přidanou křivkou LOESS regrese")

# Aplikace LOESS regrese a vykreslení do subplotů
for i, col in enumerate(vstupni_sloupce):
    X_train = train_test_splits[col]["X_train"]
    y_train = train_test_splits[col]["y_train"]
    X_test = train_test_splits[col]["X_test"]
    y_test = train_test_splits[col]["y_test"]

    loess_train = lowess(y_train, X_train, frac=0.3, it=3, return_sorted=True)
    X_loess_train, y_loess_train = loess_train[:, 0], loess_train[:, 1]

    ax = axes[i]
    ax.scatter(X_train, y_train, label="Trénovací data", color="mediumaquamarine", alpha=0.5)
    ax.scatter(X_test, y_test, label="Testovací data", color="orchid", alpha=0.5)
    ax.plot(X_loess_train, y_loess_train, label="LOESS křivka", color="deeppink", linewidth=2)
    ax.set_title(col)
    ax.set_xlabel(col)
    ax.set_ylabel(cilova_promenna)
    ax.set_facecolor('#E6E6FA')
    ax.legend(loc="lower left")


plt.tight_layout()
plt.savefig("graf_1_1.png", dpi=300, bbox_inches='tight')
plt.show()

"""## Polynomiální regrese"""

from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Funkce pro výpočet metrik
def metriky_kvality(y_true, y_pred):
    mse = mean_squared_error(y_true, y_pred)
    rmse = np.sqrt(mse)
    r2 = r2_score(y_true, y_pred)
    return rmse, r2

manufacturing = pd.read_csv("manufacturing.csv")
cilova_promenna = manufacturing["Quality Rating"].values
stupne = range(1, 10)
promenne = [
    "Temperature (°C)",
    "Pressure (kPa)",
    "Temperature x Pressure",
    "Material Fusion Metric",
    "Material Transformation Metric"
]
metriky = {promenna: [] for promenna in promenne}

for stupen in stupne:
    poly = PolynomialFeatures(degree=stupen)
    for promenna in promenne:
        X = manufacturing[[promenna]].values
        y = cilova_promenna
        X_poly = poly.fit_transform(X)
        model = LinearRegression().fit(X_poly, y)
        y_pred = model.predict(X_poly)
        metriky[promenna].append(metriky_kvality(y, y_pred))

df_metriky = pd.DataFrame([
    {"Proměnná": promenna,
    "Stupeň": stupen,
    "RMSE": metriky[promenna][i][0],
    "R²": metriky[promenna][i][1]}
    for promenna in promenne for i, stupen in enumerate(stupne)
])
#print(df_metriky)


fig, axes = plt.subplots(1, 2, figsize=(12, 5))
fig.suptitle("Srovnání metrik podle stupně polynomu")
for promenna in promenne:
    stupne_vals = df_metriky[df_metriky["Proměnná"] == promenna]["Stupeň"]
    rmse_vals = df_metriky[df_metriky["Proměnná"] == promenna]["RMSE"]
    r2_vals = df_metriky[df_metriky["Proměnná"] == promenna]["R²"]

    axes[0].plot(stupne_vals, rmse_vals, marker='o', linestyle='-', label=promenna)
    axes[1].plot(stupne_vals, r2_vals, marker='o', linestyle='-', label=promenna)

axes[0].set_title("RMSE podle stupně polynomu")
axes[0].set_xlabel("Stupeň polynomu")
axes[0].set_ylabel("RMSE")
axes[0].grid(True)
axes[0].set_facecolor('#E6E6FA')
axes[0].legend(loc = "lower left")

axes[1].set_title("R² podle stupně polynomu")
axes[1].set_xlabel("Stupeň polynomu")
axes[1].set_ylabel("R²")
axes[1].grid(True)
axes[1].set_facecolor('#E6E6FA')
axes[1].legend(loc = "lower left")

plt.tight_layout()
plt.show()

def vyber_nejlepsi_model(metriky_df):
    best_rmse = metriky_df.loc[metriky_df["RMSE"].idxmin()]
    best_r2 = metriky_df.loc[metriky_df["R²"].idxmax()]

    if best_rmse["Stupeň"] == best_r2["Stupeň"]:
        best_celkove = best_rmse
    else:
        best_celkove = best_rmse if best_rmse["R²"] > best_r2["R²"] else best_r2
    return best_celkove["Stupeň"], best_rmse["Stupeň"], best_r2["Stupeň"]

for promenna in promenne:
    df_filtered = df_metriky[df_metriky["Proměnná"] == promenna]
    nejlepsi, best_rmse, best_r2 = vyber_nejlepsi_model(df_filtered)

    print(f"\nNejlepší stupeň polynomu pro {promenna}: {nejlepsi}")
    print(f"Podle RMSE: {best_rmse}, Podle R²: {best_r2}")

fig, axes = plt.subplots(1, 5, figsize=(20, 5))
fig.suptitle("Bodové grafy vstupních proměnných s polynomiální křivkou")

promenne = ["Temperature (°C)", "Pressure (kPa)", "Temperature x Pressure", "Material Fusion Metric", "Material Transformation Metric"]
cilova_promenna = "Quality Rating"
nejlepsi_stupne = {}

for promenna in promenne:
    df_filtered = df_metriky[df_metriky["Proměnná"] == promenna]
    nejlepsi, _, _ = vyber_nejlepsi_model(df_filtered)
    nejlepsi_stupne[promenna] = nejlepsi

for i, promenna in enumerate(promenne):
    x = manufacturing[[promenna]].values
    y = manufacturing[cilova_promenna].values
    nejlepsi_stupen = nejlepsi_stupne[promenna]

    poly = PolynomialFeatures(degree=nejlepsi_stupen)
    x_poly = poly.fit_transform(x)
    model = LinearRegression().fit(x_poly, y)
    x_range = np.linspace(x.min(), x.max(), 100).reshape(-1, 1)
    y_pred = model.predict(poly.transform(x_range))

    axes[i].scatter(x, y, color='orchid', alpha=0.5, label=f"{promenna}")
    axes[i].plot(x_range, y_pred, color='deeppink', label=f"Polynom stupně {nejlepsi_stupen}", linewidth=2)
    axes[i].set_xlabel(promenna)
    axes[i].set_ylabel(cilova_promenna)
    axes[i].set_title(f"{promenna}")
    axes[i].set_facecolor('#E6E6FA')
    axes[i].legend()

plt.tight_layout()
plt.savefig("graf_1_2.png", dpi=300, bbox_inches='tight')
plt.show()

"""## 1.3. Srovnání efektivity modelů"""

import pandas as pd
from scipy.interpolate import interp1d
from statsmodels.nonparametric.smoothers_lowess import lowess
from sklearn.metrics import mean_squared_error, r2_score
from tabulate import tabulate

# Funkce co počítá metriky u LOESS
def vyhodnot_loess(X_train, y_train, X_test, y_test):
    loess_train = lowess(y_train, X_train, frac=0.3, it=3, return_sorted=True)
    X_loess_train, y_loess_train = loess_train[:, 0], loess_train[:, 1]
    interp_loess = interp1d(X_loess_train, y_loess_train, kind="linear", fill_value="extrapolate")
    y_pred_loess = interp_loess(X_test)
    rmse = np.sqrt(mean_squared_error(y_test, y_pred_loess))
    r2 = r2_score(y_test, y_pred_loess)
    return rmse, r2

# Formátování
data_metriky = []
for col in vstupni_sloupce:
    X_train = train_test_splits[col]["X_train"]
    y_train = train_test_splits[col]["y_train"]
    X_test = train_test_splits[col]["X_test"]
    y_test = train_test_splits[col]["y_test"]
    rmse, r2 = vyhodnot_loess(X_train, y_train, X_test, y_test)
    data_metriky.append({"Vstupní proměnná": col, "RMSE": rmse, "R²": r2})
df_metriky_loess = pd.DataFrame(data_metriky)

df_best_poly = df_metriky.loc[df_metriky.groupby("Proměnná")["RMSE"].idxmin()]
df_comparison = df_best_poly.merge(df_metriky_loess, left_on="Proměnná", right_on="Vstupní proměnná", suffixes=("_poly", "_loess"))
def vyber_nejlepsi_model(row):
    if row["RMSE_poly"] < row["RMSE_loess"] and row["R²_poly"] > row["R²_loess"]:
        return "Polynomiální", row["Stupeň"]
    else:
        return "LOESS", None
df_comparison[["Nejlepší model", "Optimální stupeň"]] = df_comparison.apply(vyber_nejlepsi_model, axis=1, result_type="expand")
df_table = df_comparison[["Proměnná", "Nejlepší model", "Optimální stupeň", "RMSE_poly", "R²_poly", "RMSE_loess", "R²_loess"]]
print(f"Výsledky srovnání modelů podle metrik:\n")
print(tabulate(df_table, headers="keys", tablefmt="fancy_grid", floatfmt=".4f"))

df_poly = df_comparison[["Proměnná", "Stupeň", "RMSE_poly", "R²_poly"]].rename(
    columns={"Stupeň": "Optimální_stupeň", "RMSE_poly": "RMSE", "R²_poly": "R²"})
df_poly["Model"] = "Polynomiální"
df_loess = df_comparison[["Proměnná", "RMSE_loess", "R²_loess"]].rename(
    columns={"RMSE_loess": "RMSE", "R²_loess": "R²"})
df_loess["Model"] = "LOESS"
df_loess["Optimální_stupeň"] = "None"
df_combined = pd.concat([df_poly, df_loess], ignore_index=True)
df_combined = df_combined[["Proměnná", "Model", "Optimální_stupeň", "RMSE", "R²"]]
df_combined = df_combined.sort_values(by=["Proměnná", "Model"]).reset_index(drop=True)
print(f"\nSrovnání modelů:\n")
print(tabulate(df_combined, headers="keys", tablefmt="pretty"))

"""## Vizuální porovnání predikcí obou metod"""

fig, axes = plt.subplots(1, 5, figsize=(20, 5))
fig.suptitle("Vizuální porovnání predikcí obou metod")

for i, promenna in enumerate(promenne):
    x = manufacturing[[promenna]].values
    y = manufacturing[cilova_promenna].values
    nejlepsi_stupen = nejlepsi_stupne[promenna]

    poly = PolynomialFeatures(degree=nejlepsi_stupen)
    x_poly = poly.fit_transform(x)
    model = LinearRegression().fit(x_poly, y)
    x_range = np.linspace(x.min(), x.max(), 100).reshape(-1, 1)
    y_pred_poly = model.predict(poly.transform(x_range))

    loess_curve = lowess(y, x.ravel(), frac=0.3, it=3, return_sorted=True)
    x_loess, y_loess = loess_curve[:, 0], loess_curve[:, 1]

    ax = axes[i]
    ax.scatter(x, y, color="orchid", alpha=0.5, label="Data")
    ax.plot(x_range, y_pred_poly, color="deeppink", linestyle="--", linewidth=2, label=f"Polynom (Stupeň {nejlepsi_stupen})")
    ax.plot(x_loess, y_loess, color="mediumaquamarine", linewidth=2, label="LOESS křivka", alpha = 0.75)
    ax.set_xlabel(promenna)
    ax.set_ylabel(cilova_promenna)
    ax.set_title(promenna)
    ax.set_facecolor("#E6E6FA")
    ax.legend()
plt.tight_layout()
plt.savefig("graf_1_3.png", dpi=300, bbox_inches="tight")
plt.show()