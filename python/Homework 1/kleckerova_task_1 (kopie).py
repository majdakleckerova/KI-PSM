# -*- coding: utf-8 -*-
"""Kleckerova_Task_1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/118XRt2GC2Z7V9AbirBNrtgwBfduyDraE

## 1.1. Vizualizace závislosti pomocí bodového grafu
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Styl grafu
plt.rcParams["axes.titleweight"] = "bold"
plt.rcParams['axes.labelweight'] = 'bold'
plt.rcParams['axes.titlesize'] = 14
plt.rcParams['axes.labelsize'] = 12

# Načtení dat
data_1 = pd.read_csv("simplreg.txt", sep="\t")
data_2 = pd.read_csv("fruitohms.txt", delim_whitespace = True)

# Úprava sloupců
data_2.columns = ["Juice","Ohms"]

# Rozložení
fig,axes = plt.subplots(1,2, figsize=(12,5))

#print(data_1)
#print(data_2)

# Bodový graf závislosti y = f(x)
axes[0].scatter(data_1["X"], data_1["Y"], color='orchid', alpha=0.75)
axes[0].set_xlabel("x")
axes[0].set_ylabel("y")
axes[0].set_title("Závislost y = f(x)")
axes[0].set_facecolor('#E6E6FA')

# Bodový graf závislosti juice = f(ohms)
axes[1].scatter(data_2["Ohms"], data_2["Juice"], color='skyblue', alpha=0.75)
axes[1].set_xlabel("Ohms")
axes[1].set_ylabel("Juice")
axes[1].set_title("Závislost Juice = f(Ohms)")
axes[1].set_facecolor('lightcyan')

# Zobrazení grafu
plt.tight_layout()
plt.savefig("graf_1_1.png", dpi=300, bbox_inches='tight')
plt.show()

"""## 1.2. Vytvoření regresních modelů, výpočet kritérií, grafy kritérií vs. stupně polynomu"""

from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

# Funkce pro výpočet metrik kvality
def metriky_kvality(y_true, y_pred):
    mse = mean_squared_error(y_true, y_pred)
    rmse = np.sqrt(mse)
    mae = mean_absolute_error(y_true, y_pred)
    r2 = r2_score(y_true, y_pred)
    return mse, rmse, mae, r2

x1, y1 = data_1[['X']].values, data_1['Y'].values
x2, y2 = data_2[['Ohms']].values, data_2['Juice'].values

metriky_1, metriky_2 = [], []

stupne = range(1, 10)

for stupen in stupne:
    poly = PolynomialFeatures(degree=stupen)

    # Model pro data_1
    X_poly1 = poly.fit_transform(x1)
    model1 = LinearRegression().fit(X_poly1, y1)
    y_pred1 = model1.predict(X_poly1)
    metriky_1.append(metriky_kvality(y1, y_pred1))

    # Model pro data_2
    X_poly2 = poly.fit_transform(x2)
    model2 = LinearRegression().fit(X_poly2, y2)
    y_pred2 = model2.predict(X_poly2)
    metriky_2.append(metriky_kvality(y2, y_pred2))

# Převedení metrik do DataFrame
metrics_df_1 = pd.DataFrame(metriky_1, columns=['MSE', 'RMSE', 'MAE', 'R2'], index=stupne)
metrics_df_2 = pd.DataFrame(metriky_2, columns=['MSE', 'RMSE', 'MAE', 'R2'], index=stupne)

# Funkce na vykreslení a uložení grafů pro daný dataset
def vykresli_grafy(metriky_df, nazev_souboru, nazev_datu):
    fig, axes = plt.subplots(2, 2, figsize=(8,6))
    fig.patch.set_facecolor('thistle')
    fig.suptitle(nazev_datu)

    for i, metric in enumerate(['MSE', 'RMSE', 'MAE', 'R2']):
        ax = axes[i // 2, i % 2]
        ax.plot(stupne, metriky_df[metric], marker='o', linestyle='-', color='orchid')
        ax.set_xlabel('Stupeň polynomu')
        ax.set_ylabel(metric)
        ax.set_xticks(range(1,10))
        ax.set_title(f'{metric} podle stupně polynomu')
        ax.grid(True)

    plt.tight_layout()
    plt.savefig(nazev_souboru)
    plt.show()

# Vykreslení grafů pro oba datasetové soubory
vykresli_grafy(metrics_df_1, 'graf_1_2_simplreg.png', 'simplreg.txt')
vykresli_grafy(metrics_df_2, 'graf_1_2_fruitohms.png', 'fruitohms.txt')

# Výpis tabulek s metrikami
print("Metriky pro simplreg.txt:")
print(metrics_df_1)
print("\nMetriky pro fruitohms.txt:")
print(metrics_df_2)

# Vybrání nejlepšího modelu na základě metrik
def vyber_nejlepsi_model(metriky_df):
    best_mse = metriky_df['MSE'].idxmin()
    best_rmse = metriky_df['RMSE'].idxmin()
    best_mae = metriky_df['MAE'].idxmin()
    best_r2 = metriky_df['R2'].idxmax()

    best_models = [best_mse, best_rmse, best_mae, best_r2]
    best_celkove = max(set(best_models), key=best_models.count)
    return best_celkove, best_mse, best_rmse, best_mae, best_r2

nejlepsi_1, mse_1, rmse_1, mae_1, r2_1 = vyber_nejlepsi_model(metrics_df_1)
nejlepsi_2, mse_2, rmse_2, mae_2, r2_2 = vyber_nejlepsi_model(metrics_df_2)

print(f"Nejlepší stupeň polynomu pro data_1: {nejlepsi_1}")
print(f"MSE: {mse_1}, RMSE: {rmse_1}, MAE: {mae_1}, R2: {r2_1}")

print(f"\nNejlepší stupeň polynomu pro data_2: {nejlepsi_2}")
print(f"MSE: {mse_2}, RMSE: {rmse_2}, MAE: {mae_2}, R2: {r2_2}")

"""## 1.3. Vizualizace výsledků"""

poly_9 = PolynomialFeatures(degree=nejlepsi_1)
x1_poly = poly_9.fit_transform(x1)
model1 = LinearRegression().fit(x1_poly, y1)

poly_7 = PolynomialFeatures(degree=nejlepsi_2)
x2_poly = poly_7.fit_transform(x2)
model2 = LinearRegression().fit(x2_poly, y2)

x1_range = np.linspace(x1.min(), x1.max(), 100).reshape(-1, 1)
x2_range = np.linspace(x2.min(), x2.max(), 100).reshape(-1, 1)

y1_pred = model1.predict(poly_9.transform(x1_range))
y2_pred = model2.predict(poly_7.transform(x2_range))


fig, axes = plt.subplots(1, 2, figsize=(12, 5))

# Bodový graf + polynomiální regrese pro data_1
axes[0].scatter(x1, y1, color='orchid', alpha=0.75, label='Dataset simplreg.txt')
axes[0].plot(x1_range, y1_pred, color='deeppink', linewidth=2, label='Polynom stupně 9')
axes[0].set_xlabel("X")
axes[0].set_ylabel("Y")
axes[0].set_title("Závislost Y = f(X) s regresní čarou")
axes[0].set_facecolor('#E6E6FA')
axes[0].legend()

# Bodový graf + polynomiální regrese pro data_2
axes[1].scatter(x2, y2, color='skyblue', alpha=0.75, label='Dataset fruitohms.txt')
axes[1].plot(x2_range, y2_pred, color='mediumaquamarine', linewidth=2, label='Polynom stupně 7')
axes[1].set_xlabel("Ohms")
axes[1].set_ylabel("Juice")
axes[1].set_title("Závislost Juice = f(Ohms) s regresní čarou")
axes[1].set_facecolor('lightcyan')
axes[1].legend()

plt.tight_layout()
plt.savefig("graf_1_3.png", dpi=300, bbox_inches='tight')
plt.show()