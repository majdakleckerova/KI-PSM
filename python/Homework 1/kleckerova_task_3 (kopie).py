# -*- coding: utf-8 -*-
"""Kleckerova_Task_3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CIfVQh6GS1CYhWzF0Z4jO3ZO490T_fyz

## 3.1. Vizualizace datasetů pomocí bodového grafu
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Styl grafu
plt.rcParams["figure.titlesize"] = 24
plt.rcParams["figure.titleweight"] = "bold"
plt.rcParams["axes.titleweight"] = "bold"
plt.rcParams['axes.labelweight'] = 'bold'
plt.rcParams['axes.titlesize'] = 14
plt.rcParams['axes.labelsize'] = 12

# Načtení dat
misrala = pd.read_csv("misrala.txt", delim_whitespace=True)
BoxBOD = pd.read_csv("BoxBOD.txt", delim_whitespace=True)

#print(misrala)
#print(BoxBOD)

# Úprava sloupců
misrala.columns = ["x","y"]
BoxBOD.columns = ["x1","y1"]

# Rozložení
fig,axes = plt.subplots(1,2, figsize=(12,5))

# Bodový graf závislosti datasetu misrala.txt
axes[0].scatter(misrala["x"], misrala["y"], color='orchid', alpha=0.75)
axes[0].set_xlabel("x")
axes[0].set_ylabel("y")
axes[0].set_title("misrala.txt: Závislost y = f(x)")
axes[0].set_facecolor('#E6E6FA')

# Bodový graf závislosti BoxBOD.txt
axes[1].scatter(BoxBOD["x1"], BoxBOD["y1"], color='skyblue', alpha=0.75)
axes[1].set_xlabel("x1")
axes[1].set_ylabel("y1")
axes[1].set_title("BoxBOD.txt: Závislost y1 = f(x1)")
axes[1].set_facecolor('lightcyan')

# Zobrazení grafu
plt.tight_layout()
plt.savefig("graf_1_1.png", dpi=300, bbox_inches='tight')
plt.show()

"""## 3.2.1. Polynomiální modely"""

from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

# Funkce pro výpočet metrik kvality
def metriky_kvality(y_true, y_pred):
    mse = mean_squared_error(y_true, y_pred)
    rmse = np.sqrt(mse)
    mae = mean_absolute_error(y_true, y_pred)
    r2 = r2_score(y_true, y_pred)
    return mse, rmse, mae, r2

x1, y1 = misrala[['x']].values, misrala['y'].values
x2, y2 = BoxBOD[['x1']].values, BoxBOD['y1'].values
metriky_1, metriky_2 = [], []

stupne = range(1, 10)

for stupen in stupne:
    poly = PolynomialFeatures(degree=stupen)

    # Model pro misrala.txt
    X_poly1 = poly.fit_transform(x1)
    model1 = LinearRegression().fit(X_poly1, y1)
    y_pred1 = model1.predict(X_poly1)
    metriky_1.append(metriky_kvality(y1, y_pred1))

    # Model pro BoxBOD.txt
    X_poly2 = poly.fit_transform(x2)
    model2 = LinearRegression().fit(X_poly2, y2)
    y_pred2 = model2.predict(X_poly2)
    metriky_2.append(metriky_kvality(y2, y_pred2))

metriky_df_1 = pd.DataFrame(metriky_1, columns=['MSE', 'RMSE', 'MAE', 'R2'], index=stupne)
metriky_df_2 = pd.DataFrame(metriky_2, columns=['MSE', 'RMSE', 'MAE', 'R2'], index=stupne)

def vykresli_grafy(metriky_df, nazev_souboru, nazev_datu):
    fig, axes = plt.subplots(2, 2, figsize=(8,6))
    fig.patch.set_facecolor('thistle')
    fig.suptitle(nazev_datu)

    for i, metric in enumerate(['MSE', 'RMSE', 'MAE', 'R2']):
        ax = axes[i // 2, i % 2]
        ax.plot(stupne, metriky_df[metric], marker='o', linestyle='-', color='orchid')
        ax.set_xlabel('Stupeň polynomu')
        ax.set_ylabel(metric)
        ax.set_xticks(range(1,10))
        ax.set_title(f'{metric} podle stupně polynomu')
        ax.grid(True)

    plt.tight_layout()
    plt.savefig(nazev_souboru)
    plt.show()

vykresli_grafy(metriky_df_1, 'graf_3_2_1_misrala.png', 'misrala.txt')
vykresli_grafy(metriky_df_2, 'graf_3_2_1_BoxBOD.png', 'BoxBOD.txt')

# Výpis tabulek s metrikami
print("Metriky pro misrala.txt:")
print(metriky_df_1)
print("\nMetriky pro BoxBOD.txt:")
print(metriky_df_2)

# Vybrání nejlepšího modelu na základě metrik
def vyber_nejlepsi_model(metriky_df):
    best_mse = metriky_df['MSE'].idxmin()
    best_rmse = metriky_df['RMSE'].idxmin()
    best_mae = metriky_df['MAE'].idxmin()
    best_r2 = metriky_df['R2'].idxmax()

    best_models = [best_mse, best_rmse, best_mae, best_r2]
    best_celkove = max(set(best_models), key=best_models.count)
    return best_celkove, best_mse, best_rmse, best_mae, best_r2

nejlepsi_1, mse_1, rmse_1, mae_1, r2_1 = vyber_nejlepsi_model(metriky_df_1)
nejlepsi_2, mse_2, rmse_2, mae_2, r2_2 = vyber_nejlepsi_model(metriky_df_2)

print(f"Nejlepší stupeň polynomu pro misrala.txt: {nejlepsi_1}")
print(f"MSE: {mse_1}, RMSE: {rmse_1}, MAE: {mae_1}, R2: {r2_1}")

print(f"\nNejlepší stupeň polynomu pro BoxBOD: {nejlepsi_2}")
print(f"MSE: {mse_2}, RMSE: {rmse_2}, MAE: {mae_2}, R2: {r2_2}")

"""### Rovnice pro polynomiální regresní křivky"""

nejlepsi_1 = 1 # manuálně
optimalni_stupne = {
    "misrala.txt": nejlepsi_1,
    "BoxBOD.txt": nejlepsi_2
}

def vytvor_rovnici(x, y, optimalni_stupen):
    x = x.reshape(-1, 1)
    poly = PolynomialFeatures(degree=optimalni_stupen)
    X_poly = poly.fit_transform(x)
    model = LinearRegression().fit(X_poly, y)
    coefficients = model.coef_[0]
    intercept = model.intercept_
    if isinstance(intercept, np.ndarray):
        intercept = intercept[0]
    rovnice = f"Y = {intercept:.4f} + "
    for i in range(1, len(coefficients)):
        coef = float(coefficients[i])
        rovnice += f"{coef:.2f} * X^{i}"
        if i < len(coefficients) - 1:
            rovnice += " + "
    return rovnice

rovnice_1_1 = vytvor_rovnici(x1,y1,optimalni_stupne["misrala.txt"])
print(rovnice_1_1)

rovnice_1_2 = vytvor_rovnici(x2,y2,optimalni_stupne["BoxBOD.txt"])
print(rovnice_1_2)

"""### Bodový graf datasetů s vhodnou polynomiální regresní křivkou"""

poly_5 = PolynomialFeatures(degree=5)
x1_poly = poly_5.fit_transform(x1)
model1 = LinearRegression().fit(x1_poly, y1)

poly_6 = PolynomialFeatures(degree=6)
x2_poly = poly_6.fit_transform(x2)
model2 = LinearRegression().fit(x2_poly, y2)

x1_range = np.linspace(x1.min(), x1.max(), 100).reshape(-1, 1)
x2_range = np.linspace(x2.min(), x2.max(), 100).reshape(-1, 1)

y1_pred = model1.predict(poly_5.transform(x1_range))
y2_pred = model2.predict(poly_6.transform(x2_range))

fig, axes = plt.subplots(1, 2, figsize=(20,8))

# Bodový graf + polynomiální regrese pro misrala.txt
axes[0].scatter(x1, y1, color='orchid', alpha=0.75, label='Dataset misrala.txt')
axes[0].plot(x1_range, y1_pred, color='deeppink', linewidth=2, label=f"Polynom stupně 5: {rovnice_1_1}")
axes[0].set_xlabel("x")
axes[0].set_ylabel("y")
axes[0].set_title("Závislost y = f(x) s polynomiální regresní čarou")
axes[0].set_facecolor('#E6E6FA')
axes[0].legend(loc='upper left')

# Bodový graf + polynomiální regrese pro BoxBOD.txt
axes[1].scatter(x2, y2, color='skyblue', alpha=0.75, label='Dataset BoxBOD.txt')
axes[1].plot(x2_range, y2_pred, color='mediumaquamarine', linewidth=2, label=f"Polynom stupně 6: {rovnice_1_2}")
axes[1].set_xlabel("x1")
axes[1].set_ylabel("y1")
axes[1].set_title("Závislost y1 = f(x1) s polynomiální regresní čarou")
axes[1].set_facecolor('lightcyan')
axes[1].legend(loc='upper left')

plt.tight_layout()
plt.savefig("graf_3_2_polynomialni.png", dpi=300, bbox_inches='tight')
plt.show()

"""### 3.2.2. Nelineární modely"""

from scipy.optimize import curve_fit

def nonlinear_func(x, a, b, e):
    return a * (1 - np.exp(-b * x)) + e

x1 = x1.ravel()
y1 = y1.ravel()
x2 = x2.ravel()
y2 = y2.ravel()

params1, _ = curve_fit(nonlinear_func, x1, y1, p0=[max(y1), 0.1, min(y1)])
a1, b1, e1 = params1
y1_nonlinear_pred = nonlinear_func(x1, a1, b1, e1)

params2, _ = curve_fit(nonlinear_func, x2, y2, p0=[max(y2), 0.1, min(y2)])
a2, b2, e2 = params2
y2_nonlinear_pred = nonlinear_func(x2, a2, b2, e2)

def vytvor_nelinearni_rovnici(a, b, e):
    rovnice = f"y = {a:.2f} * (1 - e^(-{b:.2f} * x)) + {e:.2f}"
    return rovnice

rovnice_1 = vytvor_nelinearni_rovnici(a1, b1, e1)
rovnice_2 = vytvor_nelinearni_rovnici(a2, b2, e2)

"""### Bodový graf datasetů s nelineární regresní křivkou"""

fig, axes = plt.subplots(1, 2, figsize=(15,6))

axes[0].scatter(x1, y1, color='orchid', alpha=0.75, label='Dataset misrala.txt')
axes[0].plot(x1, y1_nonlinear_pred, color='deeppink', linewidth=2, label=f"Nelineární regrese: {rovnice_1}")
axes[0].set_xlabel("x")
axes[0].set_ylabel("y")
axes[0].set_title("Nelineární regrese pro misrala.txt")
axes[0].set_facecolor('#E6E6FA')
axes[0].legend(loc="upper left")

axes[1].scatter(x2, y2, color='skyblue', alpha=0.75, label='Dataset BoxBOD.txt')
axes[1].plot(x2, y2_nonlinear_pred, color='mediumaquamarine', linewidth=2, label=f"Nelineární regrese: {rovnice_2}")
axes[1].set_xlabel("x1")
axes[1].set_ylabel("y1")
axes[1].set_title("Nelineární regrese pro BoxBOD.txt")
axes[1].set_facecolor('lightcyan')
axes[1].legend(loc = "upper left")

plt.tight_layout()
plt.savefig("graf_3_2_nelinearni.png",dpi = 300, bbox_inches = "tight")
plt.show()

"""### Rovnice nelineární regrese"""

def vytiskni_nelinearni_rovnici(a, b, e, nazev_datasetu):
    print(f"Rovnice pro {nazev_datasetu}:")
    print(f"y = {a:.4f} * (1 - e^(-{b:.4f} * x)) + {e:.4f}")
    print("\n")

vytiskni_nelinearni_rovnici(a1, b1, e1, "misrala.txt")
vytiskni_nelinearni_rovnici(a2, b2, e2, "BoxBOD.txt")

"""### 3.2.3. Porovnání modelů na základě kvalitativních kritérií"""

# Výpočet metrik pro nelineární regresi
metriky_1_2 = metriky_kvality(y1, y1_nonlinear_pred)
metriky_2_2 = metriky_kvality(y2, y2_nonlinear_pred)

metriky_df_1_2 = pd.DataFrame([metriky_1_2], columns=['MSE', 'RMSE', 'MAE', 'R2'], index=['misrala.txt'])
metriky_df_2_2 = pd.DataFrame([metriky_2_2], columns=['MSE', 'RMSE', 'MAE', 'R2'], index=['BoxBOD.txt'])

# misrala.txt
nelinearni_metriky_1 = metriky_df_1_2.iloc[0]
polynomiální_metriky_1 = metriky_df_1.iloc[5]

srovnani_metrik_1 = pd.DataFrame({
    'Model': ['Nelineární', 'Polynomiální (Stupeň 5)'],
    'MSE': [nelinearni_metriky_1['MSE'], polynomiální_metriky_1['MSE']],
    'RMSE': [nelinearni_metriky_1['RMSE'], polynomiální_metriky_1['RMSE']],
    'MAE': [nelinearni_metriky_1['MAE'], polynomiální_metriky_1['MAE']],
    'R2': [nelinearni_metriky_1['R2'], polynomiální_metriky_1['R2']],
})

# BoxBOD.txt
nelinearni_metriky_2 = metriky_df_2_2.iloc[0]
polynomiální_metriky_2 = metriky_df_2.iloc[6]

srovnani_metrik_2 = pd.DataFrame({
    'Model': ['Nelineární', 'Polynomiální (Stupeň 6)'],
    'MSE': [nelinearni_metriky_2['MSE'], polynomiální_metriky_2['MSE']],
    'RMSE': [nelinearni_metriky_2['RMSE'], polynomiální_metriky_2['RMSE']],
    'MAE': [nelinearni_metriky_2['MAE'], polynomiální_metriky_2['MAE']],
    'R2': [nelinearni_metriky_2['R2'], polynomiální_metriky_2['R2']],
})

# Výpis tabulek pro misrala a BoxBOD
print("Srovnání modelů pro misrala.txt:")
print(srovnani_metrik_1)

print("\nSrovnání modelů pro BoxBOD.txt:")
print(srovnani_metrik_2)

# Funkce pro výběr lepšího modelu podle metrik
def vyber_nejlepsi_model(metriky_df):
    best_mse = metriky_df.loc[metriky_df['MSE'].idxmin(), 'Model']
    best_rmse = metriky_df.loc[metriky_df['RMSE'].idxmin(), 'Model']
    best_mae = metriky_df.loc[metriky_df['MAE'].idxmin(), 'Model']
    best_r2 = metriky_df.loc[metriky_df['R2'].idxmax(), 'Model']

    best_models = [best_mse, best_rmse, best_mae, best_r2]
    best_celkove = max(set(best_models), key=best_models.count)  # Nejčastěji nejlepší model
    return best_celkove, best_mse, best_rmse, best_mae, best_r2

# Aplikace na srovnání metrik pro oba dataset
nejlepsi_1, mse_1, rmse_1, mae_1, r2_1 = vyber_nejlepsi_model(srovnani_metrik_1)
nejlepsi_2, mse_2, rmse_2, mae_2, r2_2 = vyber_nejlepsi_model(srovnani_metrik_2)

# Výpis výsledků
print(f"Vhodnější model pro misrala.txt: {nejlepsi_1}")
print(f"MSE: {mse_1}, RMSE: {rmse_1}, MAE: {mae_1}, R2: {r2_1}")

print(f"\nVhodnější model pro BoxBOD.txt: {nejlepsi_2}")
print(f"MSE: {mse_2}, RMSE: {rmse_2}, MAE: {mae_2}, R2: {r2_2}")

"""## 3.3. Vizualizace výsledků"""

# Rozložení grafu
fig, axes = plt.subplots(1, 2, figsize=(12, 6))
fig.suptitle("Vizualizace srovnání polynomiálního a nelineárního regresního modelu")

# Bodový graf + polynomiální regrese + nelineární regrese pro misrala.txt
axes[0].scatter(x1, y1, color='mediumorchid', alpha=0.8, label='Dataset misrala.txt', zorder=1)
axes[0].plot(x1_range, y1_pred, color='cyan', linewidth=2, linestyle="--", label='Polynom stupně 5', alpha=0.9, zorder=3)
axes[0].plot(x1, y1_nonlinear_pred, color='deeppink', linewidth=2, linestyle="-", label=f"Nelineární regrese: {rovnice_1}", alpha=0.6, zorder=2)
axes[0].set_xlabel("x")
axes[0].set_ylabel("y")
axes[0].set_title("misrala.txt")
axes[0].set_facecolor('white')
axes[0].legend(loc='upper center', bbox_to_anchor=(0.5, -0.2))

# Bodový graf + polynomiální regrese + nelineární regrese pro BoxBOD.txt
axes[1].scatter(x2, y2, color='mediumorchid', alpha=0.8, label='Dataset BoxBOD.txt', zorder=1)
axes[1].plot(x2_range, y2_pred, color='cyan', linewidth=2, linestyle="--", label='Polynom stupně 6', alpha=0.9, zorder=3)
axes[1].plot(x2, y2_nonlinear_pred, color='deeppink', linewidth=2, linestyle="-", label=f"Nelineární regrese: {rovnice_1}", alpha=0.6, zorder=2)
axes[1].set_xlabel("x1")
axes[1].set_ylabel("y1")
axes[1].set_title("BoxBOD.txt")
axes[1].set_facecolor('white')
axes[1].legend(loc='upper center', bbox_to_anchor=(0.5, -0.2))

# Uložení a zobrazení grafu
plt.tight_layout()
plt.savefig("graf_3_3.png", dpi=300, bbox_inches='tight')
plt.show()