# -*- coding: utf-8 -*-
"""Kleckerova_Task_2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1k8A_xlu9dngHoGRObjzHmMpqfp9JXGsb

# Úloha 2
## 2.1. Prozkoumání vztahů pomocí vizualizací
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Styl grafu
plt.rcParams["figure.titlesize"] = 24
plt.rcParams["figure.titleweight"] = "bold"
plt.rcParams["axes.titleweight"] = "bold"
plt.rcParams['axes.labelweight'] = 'bold'
plt.rcParams['axes.titlesize'] = 14
plt.rcParams['axes.labelsize'] = 12

# Načtení dat
data = pd.read_csv("manufacturing.csv", sep=",")

# Rozložení výstupního souboru
fig,axes = plt.subplots(3,2, figsize=(18,12))
fig.suptitle("Bodové grafy vstupních proměnných vs. Hodnocení kvality")

promenne = ["Temperature (°C)", "Pressure (kPa)", "Temperature x Pressure", "Material Fusion Metric", "Material Transformation Metric"]
cilova_promenna = "Quality Rating"

for i, promenna in enumerate(promenne):
    row, col = divmod(i, 2)  # Převod indexu na řádek a sloupec
    axes[row, col].scatter(data[promenna], data[cilova_promenna], color='orchid', alpha=0.75)
    axes[row, col].set_xlabel(promenna)
    axes[row, col].set_ylabel(cilova_promenna)
    axes[row, col].set_title(f"{cilova_promenna} = f({promenna})")
    axes[row, col].set_facecolor('#E6E6FA')

axes[2, 1].axis('off')
plt.tight_layout()
plt.savefig("graf_2_1.png", dpi=300, bbox_inches='tight')
plt.show()

"""## 2.2, 2.3. Vytvoření regresních modelů a výpočet metrik"""

from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

# Funkce pro výpočet metrik kvality
def metriky_kvality(y_true, y_pred):
    mse = mean_squared_error(y_true, y_pred)
    rmse = np.sqrt(mse)
    r2 = r2_score(y_true, y_pred)
    return mse, rmse, r2

metriky_1 = []
metriky_2 = []
metriky_3 = []
metriky_4 = []
metriky_5 = []

x1, y1 = data[["Temperature (°C)"]].values, data["Quality Rating"].values
x2, y2 = data[["Pressure (kPa)"]].values, data["Quality Rating"].values
x3, y3 = data[["Temperature x Pressure"]].values, data["Quality Rating"].values
x4, y4 = data[["Material Fusion Metric"]].values, data["Quality Rating"].values
x5, y5 = data[["Material Transformation Metric"]].values, data["Quality Rating"].values

stupne = range(1, 10)

for stupen in stupne:
    poly = PolynomialFeatures(degree=stupen)

    # Model pro závislost cílové proměnné na Temperature (°C)
    X_poly1 = poly.fit_transform(x1)
    model1 = LinearRegression().fit(X_poly1, y1)
    y_pred1 = model1.predict(X_poly1)
    metriky_1.append(metriky_kvality(y1, y_pred1))

    # Model pro závislost cílové proměnné na Pressure (kPa)
    X_poly2 = poly.fit_transform(x2)
    model2 = LinearRegression().fit(X_poly2, y2)
    y_pred2 = model2.predict(X_poly2)
    metriky_2.append(metriky_kvality(y2, y_pred2))

    # Model pro závislost cílové proměnné na Temperature x Pressure
    X_poly3 = poly.fit_transform(x3)
    model3 = LinearRegression().fit(X_poly3, y3)
    y_pred3 = model3.predict(X_poly3)
    metriky_3.append(metriky_kvality(y3, y_pred3))

    # Model pro závislost cílové proměnné na Material Fusion Metric
    X_poly4 = poly.fit_transform(x4)
    model4 = LinearRegression().fit(X_poly4, y4)
    y_pred4 = model4.predict(X_poly4)
    metriky_4.append(metriky_kvality(y4, y_pred4))

    # Model pro závislost cílové proměnné na Material Transformation Metric
    X_poly5 = poly.fit_transform(x5)
    model5 = LinearRegression().fit(X_poly5, y5)
    y_pred5 = model5.predict(X_poly5)
    metriky_5.append(metriky_kvality(y5, y_pred5))

# Převedení metrik do DataFrame
metriky_df_1 = pd.DataFrame(metriky_1, columns=['MSE', 'RMSE', 'R2'], index=stupne)
metriky_df_2 = pd.DataFrame(metriky_2, columns=['MSE', 'RMSE', 'R2'], index=stupne)
metriky_df_3 = pd.DataFrame(metriky_3, columns=['MSE', 'RMSE', 'R2'], index=stupne)
metriky_df_4 = pd.DataFrame(metriky_4, columns=['MSE', 'RMSE', 'R2'], index=stupne)
metriky_df_5 = pd.DataFrame(metriky_5, columns=['MSE', 'RMSE', 'R2'], index=stupne)

# Funkce na vykreslení a uložení grafů pro daný dataset
def vykresli_grafy(metriky_df, nazev_souboru, promenna):
    fig, axes = plt.subplots(1,3, figsize=(16,6))
    fig.patch.set_facecolor('thistle')
    fig.suptitle(promenna)

    for i, metric in enumerate(['MSE', 'RMSE', 'R2']):
        ax = axes[i]
        ax.plot(stupne, metriky_df[metric], marker='o', linestyle='-', color='orchid')
        ax.set_xlabel('Stupeň polynomu')
        ax.set_ylabel(metric)
        ax.set_xticks(range(1,10))
        ax.set_title(f'{metric} podle stupně polynomu')
        ax.grid(True)

    plt.tight_layout()
    plt.savefig(nazev_souboru)
    plt.show()

vykresli_grafy(metriky_df_1, "graf_2_2_1", "Model pro závislost cílové proměnné na Temperature (°C)")
vykresli_grafy(metriky_df_2, "graf_2_2_2", "Model pro závislost cílové proměnné na Pressure (kPa)")
vykresli_grafy(metriky_df_3, "graf_2_2_3", "Model pro závislost cílové proměnné na Temperature x Pressure")
vykresli_grafy(metriky_df_4, "graf_2_2_4", "Model pro závislost cílové proměnné na Material Fusion Metric")
vykresli_grafy(metriky_df_5, "graf_2_2_5", "Model pro závislost cílové proměnné na Material Transformation Metric")

# Výpis tabulek s metrikami
print("Metriky pro Temperature (°C):")
print(metriky_df_1)
print("Metriky pro Pressure (kPa)")
print(metriky_df_2)
print("Metriky pro Temperature x Pressure")
print(metriky_df_3)
print("Metriky pro Material Fusion Metric")
print(metriky_df_4)
print("Metriky pro Material Transformation Metric")
print(metriky_df_5)

"""## 2.4. Grafické zobrazení chyb v závislosti na stupni polynomu"""

# Funkce na vykreslení a uložení grafů pro daný dataset
def vykresli_grafy(metriky_df, nazev_souboru, promenna):
    fig, axes = plt.subplots(1,3, figsize=(16,6))
    fig.patch.set_facecolor('thistle')
    fig.suptitle(promenna)

    for i, metric in enumerate(['MSE', 'RMSE', 'R2']):
        ax = axes[i]
        ax.plot(stupne, metriky_df[metric], marker='o', linestyle='-', color='orchid')
        ax.set_xlabel('Stupeň polynomu')
        ax.set_ylabel(metric)
        ax.set_xticks(range(1,10))
        ax.set_title(f'{metric} podle stupně polynomu')
        ax.grid(True)

    plt.tight_layout()
    plt.savefig(nazev_souboru)
    plt.show()

vykresli_grafy(metriky_df_1, "graf_2_2_1", "Model pro závislost cílové proměnné na Temperature (°C)")
vykresli_grafy(metriky_df_2, "graf_2_2_2", "Model pro závislost cílové proměnné na Pressure (kPa)")
vykresli_grafy(metriky_df_3, "graf_2_2_3", "Model pro závislost cílové proměnné na Temperature x Pressure")
vykresli_grafy(metriky_df_4, "graf_2_2_4", "Model pro závislost cílové proměnné na Material Fusion Metric")
vykresli_grafy(metriky_df_5, "graf_2_2_5", "Model pro závislost cílové proměnné na Material Transformation Metric")

"""## 2.5. Určení nejlepšího modelu"""

# Vybrání nejlepšího modelu na základě metrik
def vyber_nejlepsi_model(metriky_df):
    best_mse = metriky_df['MSE'].idxmin()
    best_rmse = metriky_df['RMSE'].idxmin()
    best_r2 = metriky_df['R2'].idxmax()

    best_models = [best_mse, best_rmse, best_r2]
    best_celkove = max(set(best_models), key=best_models.count)
    return best_celkove, best_mse, best_rmse, best_r2

nejlepsi_1, mse_1, rmse_1, r2_1 = vyber_nejlepsi_model(metriky_df_1)
nejlepsi_2, mse_2, rmse_2, r2_2 = vyber_nejlepsi_model(metriky_df_2)
nejlepsi_3, mse_3, rmse_3, r2_3 = vyber_nejlepsi_model(metriky_df_3)
nejlepsi_4, mse_4, rmse_4, r2_4 = vyber_nejlepsi_model(metriky_df_4)
nejlepsi_5, mse_5, rmse_5, r2_5 = vyber_nejlepsi_model(metriky_df_5)

# Výpis výsledků
print(f"Nejlepší stupeň polynomu pro závislost Temperature (°C) na cílové proměnné: {nejlepsi_1}")
print(f"MSE: {mse_1}, RMSE: {rmse_1} R2: {r2_1}")
print(f"Nejlepší stupeň polynomu pro závislost Pressure (kPa) na cílové proměnné: {nejlepsi_2}")
print(f"MSE: {mse_2}, RMSE: {rmse_2} R2: {r2_2}")
print(f"Nejlepší stupeň polynomu pro závislost Temperature x Pressure na cílové proměnné: {nejlepsi_3}")
print(f"MSE: {mse_3}, RMSE: {rmse_3} R2: {r2_3}")
print(f"Nejlepší stupeň polynomu pro závislost Material Fusion Metric na cílové proměnné: {nejlepsi_4}")
print(f"MSE: {mse_4}, RMSE: {rmse_4} R2: {r2_4}")
print(f"Nejlepší stupeň polynomu pro závislost Material Transformation Metric na cílové proměnné: {nejlepsi_5}")
print(f"MSE: {mse_5}, RMSE: {rmse_5} R2: {r2_5}")

"""### Rovnice nejlepších modelů"""

# Rovnice nejlepších polynomiálních modelů
optimalni_stupne = {
    "Temperature (°C)": nejlepsi_1,
    "Pressure (kPa)": nejlepsi_2,
    "Temperature x Pressure": nejlepsi_3,
    "Material Fusion Metric": nejlepsi_4,
    "Material Transformation Metric": nejlepsi_5
}

def vytiskni_rovnici(x, y, optimalni_stupen, nazev_promenne):
    poly = PolynomialFeatures(degree=optimalni_stupen)
    X_poly = poly.fit_transform(x)
    model = LinearRegression().fit(X_poly, y)

    coefficients = model.coef_
    intercept = model.intercept_

    print(f"Rovnice pro {nazev_promenne} (stupeň {optimalni_stupen}):")
    print(f"Y = {intercept} + ", end="")

    for i in range(1, len(coefficients)):
        print(f"{coefficients[i]} * X^{i}", end=" + " if i < len(coefficients) - 1 else "\n")
    print("\n")

vytiskni_rovnici(x1, y1, optimalni_stupne["Temperature (°C)"], "Temperature (°C)")
vytiskni_rovnici(x2, y2, optimalni_stupne["Pressure (kPa)"], "Pressure (kPa)")
vytiskni_rovnici(x3, y3, optimalni_stupne["Temperature x Pressure"], "Temperature x Pressure")
vytiskni_rovnici(x4, y4, optimalni_stupne["Material Fusion Metric"], "Material Fusion Metric")
vytiskni_rovnici(x5, y5, optimalni_stupne["Material Transformation Metric"], "Material Transformation Metric")

"""## 2.6. Vizualizace výsledků"""

fig, axes = plt.subplots(3, 2, figsize=(18,12))
fig.suptitle("Bodové grafy vstupních proměnných vs. Hodnocení kvality s regresní čarou")

promenne = ["Temperature (°C)", "Pressure (kPa)", "Temperature x Pressure", "Material Fusion Metric", "Material Transformation Metric"]
cilova_promenna = "Quality Rating"

for i, promenna in enumerate(promenne):
    row, col = divmod(i, 2)

    x = eval(f"x{i+1}")
    y = eval(f"y{i+1}")

    poly = PolynomialFeatures(degree=eval(f"nejlepsi_{i+1}"))
    x_poly = poly.fit_transform(x)
    model = LinearRegression().fit(x_poly, y)

    x_range = np.linspace(x.min(), x.max(), 100).reshape(-1, 1)
    y_pred = model.predict(poly.transform(x_range))

    axes[row, col].scatter(x, y, color='plum', alpha=0.75, label = f"{promenna}")
    axes[row, col].plot(x_range, y_pred, color='fuchsia', label=f"Polynom stupně {eval(f'nejlepsi_{i+1}')}", linewidth=2)
    axes[row, col].set_xlabel(promenna)
    axes[row, col].set_ylabel(cilova_promenna)
    axes[row, col].set_title(f"{cilova_promenna} = f({promenna})")
    axes[row, col].set_facecolor('#E6E6FA')
    axes[row, col].legend()

plt.tight_layout()
axes[2, 1].axis('off')
plt.savefig("graf_2_6.png", dpi=300, bbox_inches='tight')
plt.show()